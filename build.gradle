/* ============================================================================
 * Build file for project 'WhatsAppAPI'
 * ============================================================================
 * This file was initial generated by EGradle
 * using 'Basic single gradle project (Java)' template
 * 
 * This is a very basic template suitable for gradle beginners and is nearly the
 * same as done by Gradle 'init' task. This generated file contains a sample 
 * Java project to get you started. In addition it will setup all necessary
 * eclipse parts also, so an out of the box import is possible.
 *
 * For more details about the java parts take a look at the Java Quickstart 
 * chapter in the Gradle user guide available at 
 * https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 * ============================================================================
 */

group = "whatsappapi"
version = "0.0.1"

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'

dependencies {
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.11.0'
	implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.5' // Use the desired Jackson version
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5' // Use the version you need
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
	implementation 'com.squareup.retrofit2:converter-jackson:2.9.0' // Use the version that matches your Retrofit version
	
	
	
	
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

eclipse {    
  classpath {
    // see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
    downloadSources = true
    downloadJavadoc = true
  }
} 

/* handle non existing source folders*/
def eclipseSourceFolders=[
    'src/main/java',
    'src/main/resources',
    'src/test/java',
    'src/test/resources'
];
tasks.eclipse.dependsOn << {
        
    for (String sourceFolder: eclipseSourceFolders){ 
        def resourceDir = new File(project.projectDir, sourceFolder)
        /* try to create folder when not existing */
        if( !resourceDir.exists() && ! resourceDir.mkdirs() ) {
            logger.info("Not able to create %1",resourceDir);
        }
    }
}